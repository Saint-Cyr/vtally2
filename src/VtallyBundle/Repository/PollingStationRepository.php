<?php

namespace VtallyBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PollingStationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PollingStationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPollingStations($numberPerPage, $page)
    {
        $query = $this->createQueryBuilder('p');
        if($page < 1){
            throw new \InvalidArgumentException('The argument   $page cannot be negative. Value: '.$page);
        }
        
        $query->setFirstResult(($page - 1)*$numberPerPage)
              ->setMaxResults($numberPerPage);
        
        return new Paginator($query);
    }
    
    public function getLimitedList($max)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p')
           ->where('p.active = true');
           //->setParameter($var, true);
        $qb->setMaxResults();
        return $qb;
    }
    
    public function getForSearch($keyWord)
    {
        $query = $this->_em->createQueryBuilder();
                 $query->select('p')
                    ->from('VtallyBundle:PollingStation', 'p')
                    ->where($query->expr()->like('p.name', $query->expr()->literal('%' . $keyWord . '%')))
                    ->orderBy('p.name', 'ASC')
                    ->getQuery()
                    ->setParameter('keyWord', '%'.$keyWord.'%');
              
        return $query->getQuery()->getResult();
    }
}
